// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

// User authentication and profile
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String? // For credential auth
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // User profile data
  level          Int       @default(1)
  xp             Int       @default(0)
  streak         Int       @default(0)
  longestStreak  Int       @default(0)
  totalStudyTime Int       @default(0) // in minutes
  joinDate       DateTime  @default(now())
  isProMember    Boolean   @default(false)
  proExpiresAt   DateTime?

  // Learning preferences
  dailyGoal      Int      @default(5) // lessons per day
  reminderTime   String? // "09:00"
  preferredVoice String   @default("female")
  studyLanguages String[] @default(["hiragana", "katakana"])

  // Relations
  accounts         Account[]
  sessions         Session[]
  lessonProgress   LessonProgress[]
  achievements     UserAchievement[]
  studyGroups      StudyGroupMember[]
  messages         CommunityMessage[]
  messageReactions MessageReaction[]
  studySessions    StudySession[]
  subscriptions    Subscription[]

  @@map("users")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Learning content models
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  lessons Lesson[]

  @@map("categories")
}

model Lesson {
  id          String     @id @default(cuid())
  title       String
  description String?
  content     Json // Stores lesson questions and content
  order       Int        @default(0)
  difficulty  Difficulty @default(BEGINNER)
  xpReward    Int        @default(10)
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  @@map("lessons")
}

model LessonProgress {
  id            String       @id @default(cuid())
  userId        String
  lessonId      String // Can be lesson ID or category ID (e.g., "category-1")
  status        LessonStatus @default(NOT_STARTED)
  score         Int? // 0-100
  timeSpent     Int          @default(0) // in seconds
  attempts      Int          @default(0)
  lastAttemptAt DateTime?
  completedAt   DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Note: lessonId can reference lessons OR be a category identifier

  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

// Vocabulary and study materials
model VocabularyItem {
  id         String        @id @default(cuid())
  japanese   String
  romaji     String
  english    String
  category   VocabCategory
  difficulty Difficulty    @default(BEGINNER)
  image      String?
  audio      String?
  memoryTip  String?
  context    String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@map("vocabulary_items")
}

// Study sessions for tracking daily activity
model StudySession {
  id               String   @id @default(cuid())
  userId           String
  date             DateTime @db.Date
  duration         Int // in minutes
  xpEarned         Int      @default(0)
  lessonsCompleted Int      @default(0)
  createdAt        DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("study_sessions")
}

// Achievement system
model Achievement {
  id          String              @id @default(cuid())
  name        String              @unique
  description String
  icon        String?
  category    AchievementCategory
  requirement Json // Stores requirement criteria
  xpReward    Int                 @default(0)
  isActive    Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

// Community features
model StudyGroup {
  id          String     @id @default(cuid())
  name        String
  description String?
  level       Difficulty @default(BEGINNER)
  isPublic    Boolean    @default(true)
  maxMembers  Int        @default(100)
  createdBy   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  members  StudyGroupMember[]
  messages CommunityMessage[]

  @@map("study_groups")
}

model StudyGroupMember {
  id           String         @id @default(cuid())
  userId       String
  studyGroupId String
  role         StudyGroupRole @default(MEMBER)
  joinedAt     DateTime       @default(now())

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  studyGroup StudyGroup @relation(fields: [studyGroupId], references: [id], onDelete: Cascade)

  @@unique([userId, studyGroupId])
  @@map("study_group_members")
}

model CommunityMessage {
  id           String   @id @default(cuid())
  content      String
  userId       String
  studyGroupId String?
  parentId     String? // For replies
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  studyGroup StudyGroup?        @relation(fields: [studyGroupId], references: [id], onDelete: Cascade)
  parent     CommunityMessage?  @relation("MessageReplies", fields: [parentId], references: [id])
  replies    CommunityMessage[] @relation("MessageReplies")
  reactions  MessageReaction[]

  @@map("community_messages")
}

model MessageReaction {
  id        String       @id @default(cuid())
  userId    String
  messageId String
  type      ReactionType
  createdAt DateTime     @default(now())

  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  message CommunityMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId, type])
  @@map("message_reactions")
}

// Subscription and payment
model Subscription {
  id                   String             @id @default(cuid())
  userId               String
  plan                 SubscriptionPlan
  status               SubscriptionStatus @default(ACTIVE)
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  stripeCustomerId     String?
  stripeSubscriptionId String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// Enums
enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum LessonStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum VocabCategory {
  GREETINGS
  FAMILY
  FOOD
  COLORS
  NUMBERS
  BODY_PARTS
  ANIMALS
  WEATHER
  TIME
  TRANSPORTATION
  EMOTIONS
  SCHOOL
  WORK
  HOBBIES
}

enum AchievementCategory {
  LESSONS
  STREAKS
  VOCABULARY
  COMMUNITY
  TIME_BASED
  MILESTONES
}

enum StudyGroupRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum ReactionType {
  HELPFUL
  LIKE
  LOVE
  THANKS
}

enum SubscriptionPlan {
  FREE
  PRO_MONTHLY
  PRO_YEARLY
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  INCOMPLETE
}
